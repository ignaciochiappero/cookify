
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Food {
  id String @id @default(uuid())
  name String
  description String
  image String
  icon String?
  category FoodCategory @default(VEGETABLE)
  unit FoodUnit @default(PIECE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relación con preferencias de usuarios
  userPreferences UserFoodPreference[]
  // Relación con inventario de usuarios
  userInventory UserIngredientInventory[]
}

enum FoodCategory {
  VEGETABLE
  FRUIT
  MEAT
  DAIRY
  GRAIN
  LIQUID
  SPICE
  OTHER
}

enum FoodUnit {
  PIECE
  GRAM
  KILOGRAM
  LITER
  MILLILITER
  CUP
  TABLESPOON
  TEASPOON
  POUND
  OUNCE
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String?
  password String?
  role UserRole @default(USER)
  image String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relación con preferencias de alimentos
  foodPreferences UserFoodPreference[]
  
  // Relación con inventario de ingredientes
  ingredientInventory UserIngredientInventory[]
  
  // Relación con recetas generadas
  recipes Recipe[]
  
  // Relación con calendario de comidas
  mealCalendar MealCalendar[]
  
  // Relación con sesiones de NextAuth
  accounts Account[]
  sessions Session[]
}

model UserFoodPreference {
  id String @id @default(uuid())
  userId String
  foodId String
  isAvailable Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@unique([userId, foodId])
}

model Recipe {
  id String @id @default(uuid())
  title String
  description String
  ingredients String // JSON string de ingredientes seleccionados
  instructions String
  cookingTime Int? // en minutos
  difficulty String? // Fácil, Medio, Difícil
  servings Int? // número de porciones
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealCalendar MealCalendar[]
}

enum UserRole {
  USER
  ADMIN
}

// Modelos para NextAuth.js
model Account {
  id String @id @default(uuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid())
  sessionToken String @unique
  userId String
  expires DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  
  @@unique([identifier, token])
}

// Modelo para inventario de ingredientes del usuario
model UserIngredientInventory {
  id String @id @default(uuid())
  userId String
  foodId String
  quantity Float
  unit FoodUnit
  expirationDate DateTime?
  notes String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@unique([userId, foodId])
}

// Modelo para calendario de comidas
model MealCalendar {
  id String @id @default(uuid())
  userId String
  date DateTime
  mealType MealType
  recipeId String?
  customMealName String?
  isPlanned Boolean @default(false)
  isCompleted Boolean @default(false)
  notes String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe? @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  
  @@unique([userId, date, mealType])
}

enum MealType {
  BREAKFAST
  LUNCH
  SNACK
  DINNER
}