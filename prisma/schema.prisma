
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Food {
  id String @id @default(uuid())
  name String
  description String
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relación con preferencias de usuarios
  userPreferences UserFoodPreference[]
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String?
  password String?
  role UserRole @default(USER)
  image String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relación con preferencias de alimentos
  foodPreferences UserFoodPreference[]
  
  // Relación con recetas generadas
  recipes Recipe[]
  
  // Relación con sesiones de NextAuth
  accounts Account[]
  sessions Session[]
}

model UserFoodPreference {
  id String @id @default(uuid())
  userId String
  foodId String
  isAvailable Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@unique([userId, foodId])
}

model Recipe {
  id String @id @default(uuid())
  title String
  description String
  ingredients String // JSON string de ingredientes seleccionados
  instructions String
  cookingTime Int? // en minutos
  difficulty String? // Fácil, Medio, Difícil
  servings Int? // número de porciones
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

// Modelos para NextAuth.js
model Account {
  id String @id @default(uuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid())
  sessionToken String @unique
  userId String
  expires DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  
  @@unique([identifier, token])
}